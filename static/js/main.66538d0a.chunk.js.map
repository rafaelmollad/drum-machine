{"version":3,"sources":["components/DrumPad.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","react_default","a","createElement","onClick","handleUpdate","name","url","className","id","Display","displayText","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playMusic","audio","play","handleKeyPress","e","elementUrl","elementName","element","state","drumPads","filter","drumPad","key","toUpperCase","undefined","text","setState","Audio","document","addEventListener","_this2","components_Display","map","components_DrumPad","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAeeA,MAbf,SAAiBC,GACf,OACEC,EAAAC,EAAAC,cAAA,OAEEC,QAAS,kBAAMJ,EAAMK,aAAaL,EAAMM,KAAMN,EAAMO,MACpDC,UAAU,WACVC,GAAIT,EAAMS,IAETT,EAAMS,WCCEC,MARf,SAAiBV,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKM,GAAG,WACNR,EAAAC,EAAAC,cAAA,SAAIH,EAAMW,eCsHDC,cArHb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMhB,KAuDRoB,UAAY,SAAAC,GACVA,EAAMC,QAzDWT,EA4DnBU,eAAiB,SAAAC,GAEf,IAKIC,EACAC,EANEC,EAAUd,EAAKe,MAAMC,SAASC,OAClC,SAAAC,GAAO,OAAIA,EAAQtB,IAAMe,EAAEQ,IAAIC,qBAQdC,IAAfP,EAAQ,KACVF,EAAaE,EAAQ,GAAR,IACbD,EAAcC,EAAQ,GAAR,KAGdd,EAAKR,aAAaqB,EAAaD,KA5EhBZ,EAiFnBR,aAAe,SAAC8B,EAAM5B,GACpBM,EAAKuB,SACH,CACEf,MAAO,IAAIgB,MAAM9B,GACjBI,YAAawB,GAEf,kBAAMtB,EAAKO,UAAUP,EAAKe,MAAMP,UArFlCR,EAAKe,MAAQ,CACXC,SAAU,CACR,CACEvB,KAAM,WACNG,GAAI,IACJF,IAAK,4DAEP,CACED,KAAM,WACNG,GAAI,IACJF,IAAK,4DAEP,CACED,KAAM,WACNG,GAAI,IACJF,IAAK,4DAEP,CACED,KAAM,eACNG,GAAI,IACJF,IAAK,8DAEP,CACED,KAAM,OACNG,GAAI,IACJF,IAAK,8DAEP,CACED,KAAM,UACNG,GAAI,IACJF,IAAK,2DAEP,CACED,KAAM,UACNG,GAAI,IACJF,IAAK,2DAEP,CACED,KAAM,cACNG,GAAI,IACJF,IAAK,iEAEP,CACED,KAAM,aACNG,GAAI,IACJF,IAAK,iEAGTc,MAAO,GACPV,YAAa,IAnDEE,oFA4FjByB,SAASC,iBAAiB,UAAWvB,KAAKO,iDAGnC,IAAAiB,EAAAxB,KACP,OACEf,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,OAAKM,GAAG,gBACNR,EAAAC,EAAAC,cAACsC,EAAD,CAAS9B,YAAaK,KAAKY,MAAMjB,cACjCV,EAAAC,EAAAC,cAAA,OAAKM,GAAG,sBACLO,KAAKY,MAAMC,SAASa,IAAI,SAAAX,GAAO,OAC9B9B,EAAAC,EAAAC,cAACwC,EAAD,CACElC,GAAIsB,EAAQtB,GACZuB,IAAKD,EAAQtB,GACbF,IAAKwB,EAAQxB,IACbD,KAAMyB,EAAQzB,KACdD,aAAcmC,EAAKnC,2BA5GjBuC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASd,SAASe,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.66538d0a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./DrumPad.css\";\r\nfunction DrumPad(props) {\r\n  return (\r\n    <div\r\n      // When a component is clicked, playMusic will be called\r\n      onClick={() => props.handleUpdate(props.name, props.url)}\r\n      className=\"drum-pad\"\r\n      id={props.id}\r\n    >\r\n      {props.id}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DrumPad;\r\n","import React from \"react\";\r\nimport \"./Display.css\";\r\n\r\nfunction Display(props) {\r\n  return (\r\n    <div id=\"display\">\r\n      <p>{props.displayText}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport DrumPad from \"./components/DrumPad\";\r\nimport Display from \"./components/Display\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      drumPads: [\r\n        {\r\n          name: \"heater-1\",\r\n          id: \"Q\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\r\n        },\r\n        {\r\n          name: \"heater-2\",\r\n          id: \"W\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\r\n        },\r\n        {\r\n          name: \"heater-3\",\r\n          id: \"E\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\r\n        },\r\n        {\r\n          name: \"kick-and-hat\",\r\n          id: \"A\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\r\n        },\r\n        {\r\n          name: \"kick\",\r\n          id: \"S\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\r\n        },\r\n        {\r\n          name: \"chord-1\",\r\n          id: \"D\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\"\r\n        },\r\n        {\r\n          name: \"chord-2\",\r\n          id: \"Z\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\"\r\n        },\r\n        {\r\n          name: \"punchy-kick\",\r\n          id: \"X\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\"\r\n        },\r\n        {\r\n          name: \"side-stick\",\r\n          id: \"C\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\"\r\n        }\r\n      ],\r\n      audio: \"\",\r\n      displayText: \"\"\r\n    };\r\n  }\r\n\r\n  // Plays audio each time a component is clicked\r\n  playMusic = audio => {\r\n    audio.play();\r\n  };\r\n\r\n  handleKeyPress = e => {\r\n    // Get the drumPad corresponding to the key pressed\r\n    const element = this.state.drumPads.filter(\r\n      drumPad => drumPad.id == e.key.toUpperCase()\r\n    );\r\n\r\n    // Define variables to store the drumPad url and name\r\n    let elementUrl;\r\n    let elementName;\r\n\r\n    // Check that the key pressed is a valid key\r\n    if (element[0] !== undefined) {\r\n      elementUrl = element[0][\"url\"];\r\n      elementName = element[0][\"name\"];\r\n\r\n      // Call handleUpdate\r\n      this.handleUpdate(elementName, elementUrl);\r\n    }\r\n  };\r\n\r\n  // Update audio and display text\r\n  handleUpdate = (text, url) => {\r\n    this.setState(\r\n      {\r\n        audio: new Audio(url),\r\n        displayText: text\r\n      },\r\n      () => this.playMusic(this.state.audio)\r\n    );\r\n  };\r\n\r\n  componentWillMount() {\r\n    document.addEventListener(\"keydown\", this.handleKeyPress);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div id=\"drum-machine\">\r\n          <Display displayText={this.state.displayText} />\r\n          <div id=\"drumpads-container\">\r\n            {this.state.drumPads.map(drumPad => (\r\n              <DrumPad\r\n                id={drumPad.id}\r\n                key={drumPad.id}\r\n                url={drumPad.url}\r\n                name={drumPad.name}\r\n                handleUpdate={this.handleUpdate}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}